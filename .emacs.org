* Literate Emacs Config
By Tobi Lehman <mail@tobilehman.com>, on 2022-11-29

** Motivation
I have written and re-written my emacs and spacemacs configs multiple times since I started using
emacs seriously in 2009. Each time I add more functionality, then the file gets too unweildy, and
I quit and declare config file bankruptcy. This time is different. The reason is because this time
the config will be an org file. All of the excellence of an org-mode literate programming document, 
generating the org config automatically. This will keep the configuration in a single source file,
file:~./.emacs.org, then the appearance, dependencies and other configuration will live in this
org document.

** How to use
To turn this file into a valid emacs config, run ~~M-x org-babel-tangle~~

#+begin_src emacs-lisp :tangle .emacs
;; Generated by .emacs.org
#+end_src

** Appearance
*** Color Modes
Mostly light mode and dark mode.

#+begin_src emacs-lisp :tangle .emacs
  (defun dark-mode ()
    (interactive)
    (set-background-color "#000000")
    (set-foreground-color "#ffffff")
    (set-face-background 'hl-line "#111111"))

  (defun light-mode ()
    (interactive)
    (set-foreground-color "#000000")
    (set-background-color "#ffffff")
    (set-face-background 'hl-line "#eeeeee"))
#+end_src

*** Font
The font is Fira Code, height 140

#+begin_src emacs-lisp :tangle .emacs
  (custom-set-faces
   '(default (
  (t (:inherit nil :extend nil :stipple nil :background "#000000" :foreground "#ffffff" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight regular :height 140 :width normal :foundry "CTDB" :family "Fira Code")))))
#+end_src

*** Highlight and Bars

#+begin_src emacs-lisp :tangle .emacs
  (global-hl-line-mode 1)
  (set-face-foreground 'highlight nil) ; keep syntax hl
  (dark-mode)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Backup
By default emacs puts \~files~\ everywhere in your fs tree.

#+begin_src emacs-lisp :tangle .emacs

  (if (not (file-exists-p "~/.saves"))
      (make-directory "~/.saves"))

  (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves/"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
#+end_src
** Custom Functions
*** Org-mode insert src block
This is to insert a begin_src into an org document.

#+begin_src 
#+end_src




#+begin_src emacs-lisp :tangle .emacs
(defun org--insert-begin-src ()
    "insert org-mode begin_src block"
    (interactive)
    (insert "#+begin_src \n#+end_src")
    (backward-char 10))

;; wire up the function

(add-hook 'org-mode-hook
	    (lambda ()
	    (evil-local-set-key 'insert (kbd "C-e") 'org--insert-begin-src)
	    (local-set-key (kbd "C-e") 'org--insert-begin-src)))
#+end_src

*** Terminal split at bottom
To imitate the C-` feature on vscode, I made a split that opens term.

The idea behind this feature is to easily drop into a terminal using ~~C-`~~

That motivates this global keybinding:
#+begin_src emacs-lisp :tangle .emacs

  (global-set-key (kbd "C-`") 'open-shell-below)
#+end_src

Then we define the ~~open-shell-below~~ function:
#+begin_src emacs-lisp :tangle .emacs
(defvar is-shell-window-open nil)

(defun open-shell-below ()
  "Like control backtick in vscode, but in emacs. Open the shell below the window"
  (interactive)
  (if is-shell-window-open
      (progn
	(delete-window)
	(set-variable 'is-shell-window-open nil))
    (progn
      (split-window-vertically)
      (term)
      (set-variable 'is-shell-window-open t))))
#+end_src

** Dependencies
The packages that my emacs configuration depends on are in the list below

#+name: deps-table
| Package Name  | Repository | Note             |
|---------------+------------+------------------|
| evil          | elpa       | Vim mode         |
| evil-org      | elpa       | Vim/Org compat.  |
| markdown-mode | elpa       | Markdown support |
| magit         | elpa       | Git mode         |
| org-roam      | melpa      | Roam-style Org   |

To convert the above table of dependencies into the Emacs Lisp list that
will get put into the .emacs config file, run ~~C-c C-c~~, then
**remember to append ":tangle .emacs" to the results**
#+begin_src emacs-lisp :var tbl=deps-table :results code :shebang :tangle .emacs
  (defvar deps-tbl (mapcar #'car tbl))

  deps-tbl
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
("evil" "evil-org" "markdown-mode" "magit" "org-roam")
#+end_src

** Mappings
These are the custom keymappings I use.
*** <f5> org-babel-tangle

#+begin_src emacs-lisp :tangle .emacs
  
#+end_src

** Initialization
*** Start the server
The server runs a socket to listen to ~~emacsclient~~ calls.

#+begin_src emacs-lisp :tangle .emacs
  (server-start)
#+end_src

#+RESULTS:
*** Evil mode for vim keybindings
vim is not an editor it's a way of life.

#+begin_src emacs-lisp :tangle .emacs
  (evil-mode)
#+end_src
*** Split open the scratch and this file

#+begin_src emacs-lisp :tangle .emacs
#+end_src

** Repos
*** MELPA
Adding melpa to get org-roam

#+begin_src emacs-lisp :tangle .emacs
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.
;; See `package-archive-priorities` and `package-pinned-packages`.
;; Most users will not need or want to do this.
(add-to-list 'package-archives
'("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+end_src
